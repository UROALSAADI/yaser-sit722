name: CI Pipeline - Testing Branch

on:
  push:
    branches: [ "testing" ]

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Set DATABASE_URL for SQLAlchemy
      - name: Set DATABASE_URL
        run: echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV

      # 4. Install dependencies
      - name: Install dependencies - customer_service
        run: |
          cd backend/customer_service
          pip install -r requirements-dev.txt

      - name: Install dependencies - order_service
        run: |
          cd backend/order_service
          pip install -r requirements-dev.txt

      - name: Install dependencies - product_service
        run: |
          cd backend/product_service
          pip install -r requirements-dev.txt

      - name: Install dependencies - frontend
        run: |
          cd frontend
          pip install -r requirements-dev.txt || echo "No requirements-dev.txt for frontend"

      # 5. Create database tables before running tests
      - name: Create database tables
        run: |
          python -c "
import os
from backend.customer_service.db import Base, engine
Base.metadata.create_all(bind=engine)
          "

      # 6. Run backend tests
      - name: Test customer_service
        run: |
          cd backend/customer_service
          pytest -q

      - name: Test order_service
        run: |
          cd backend/order_service
          pytest -q

      - name: Test product_service
        run: |
          cd backend/product_service
          pytest -q

      # 7. Azure login and push Docker images (only if tests pass)
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io

      - name: Build and push customer_service image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/customer_service
          file: ./backend/customer_service/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/customer_service:${{ env.IMAGE_TAG }}

      - name: Build and push order_service image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/order_service
          file: ./backend/order_service/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/order_service:${{ env.IMAGE_TAG }}

      - name: Build and push product_service image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/product_service
          file: ./backend/product_service/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/product_service:${{ env.IMAGE_TAG }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/frontend:${{ env.IMAGE_TAG }}
