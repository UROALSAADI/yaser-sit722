name: CI Pipeline - Testing Branch

on:
  push:
    branches: [ "testing" ]

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Set DATABASE_URL for tests
      - name: Set DATABASE_URL
        run: echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV

      # Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to start..."
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U testuser && break
            sleep 2
          done

      # Install dependencies for each service
      - name: Install dependencies - customer_service
        run: |
          cd backend/customer_service
          pip install -r requirements-dev.txt

      - name: Install dependencies - order_service
        run: |
          cd backend/order_service
          pip install -r requirements-dev.txt

      - name: Install dependencies - product_service
        run: |
          cd backend/product_service
          pip install -r requirements-dev.txt

      # Run tests for each service
      - name: Test customer_service
        run: |
          cd backend/customer_service
          pytest -q

      - name: Test order_service
        run: |
          cd backend/order_service
          pytest -q

      - name: Test product_service
        run: |
          cd backend/product_service
          pytest -q

  build-and-push:
    runs-on: ubuntu-latest
    needs: test-backend
    if: success()  # Only run if tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Login to Azure
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io

      # Build and push backend Docker images
      - uses: docker/build-push-action@v5
        with:
          context: ./backend/customer_service
          file: ./backend/customer_service/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/customer_service:${{ env.IMAGE_TAG }}

      - uses: docker/build-push-action@v5
        with:
          context: ./backend/order_service
          file: ./backend/order_service/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/order_service:${{ env.IMAGE_TAG }}

      - uses: docker/build-push-action@v5
        with:
          context: ./backend/product_service
          file: ./backend/product_service/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/product_service:${{ env.IMAGE_TAG }}

      # Build and push frontend Docker image
      - uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/frontend:${{ env.IMAGE_TAG }}
